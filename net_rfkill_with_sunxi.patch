diff --git a/net/rfkill/Kconfig b/net/rfkill/Kconfig
index 78efe89..7c651b1 100644
--- a/net/rfkill/Kconfig
+++ b/net/rfkill/Kconfig
@@ -10,6 +10,11 @@ menuconfig RFKILL
 	  To compile this driver as a module, choose M here: the
 	  module will be called rfkill.
 
+config RFKILL_PM
+	bool "Power off on suspend"
+	depends on RFKILL && PM
+	default y
+
 # LED trigger support
 config RFKILL_LEDS
 	bool
@@ -42,3 +47,12 @@ config RFKILL_GPIO
 	  If you say yes here you get support of a generic gpio RFKILL
 	  driver. The platform should fill in the appropriate fields in the
 	  rfkill_gpio_platform_data structure and pass that to the driver.
+
+
+config SUNXI_RFKILL
+	bool "Winner's GPIO RFKILL driver"
+	depends on RFKILL
+    depends on ARCH_SUN4I || ARCH_SUN5I
+    default y if ARCH_SUN4I
+    default y if ARCH_SUN5I
+
diff --git a/net/rfkill/Makefile b/net/rfkill/Makefile
index 3117687..482a82d 100644
--- a/net/rfkill/Makefile
+++ b/net/rfkill/Makefile
@@ -7,3 +7,5 @@ rfkill-$(CONFIG_RFKILL_INPUT)	+= input.o
 obj-$(CONFIG_RFKILL)		+= rfkill.o
 obj-$(CONFIG_RFKILL_REGULATOR)	+= rfkill-regulator.o
 obj-$(CONFIG_RFKILL_GPIO)	+= rfkill-gpio.o
+obj-$(CONFIG_SUNXI_RFKILL)	+= sunxi-rfkill.o
+obj-$(CONFIG_SUNXI_RFKILL)	+= sunxi-usb-rfkill.o
diff --git a/net/rfkill/core.c b/net/rfkill/core.c
index f974961..04afd89 100644
--- a/net/rfkill/core.c
+++ b/net/rfkill/core.c
@@ -770,6 +770,7 @@ void rfkill_pause_polling(struct rfkill *rfkill)
 }
 EXPORT_SYMBOL(rfkill_pause_polling);
 
+#ifdef CONFIG_RFKILL_PM
 void rfkill_resume_polling(struct rfkill *rfkill)
 {
 	BUG_ON(!rfkill);
@@ -804,14 +805,17 @@ static int rfkill_resume(struct device *dev)
 
 	return 0;
 }
+#endif
 
 static struct class rfkill_class = {
 	.name		= "rfkill",
 	.dev_release	= rfkill_release,
 	.dev_attrs	= rfkill_dev_attrs,
 	.dev_uevent	= rfkill_dev_uevent,
+#ifdef CONFIG_RFKILL_PM
 	.suspend	= rfkill_suspend,
 	.resume		= rfkill_resume,
+#endif
 };
 
 bool rfkill_blocked(struct rfkill *rfkill)
diff --git a/net/rfkill/sunxi-rfkill.c b/net/rfkill/sunxi-rfkill.c
new file mode 100644
index 0000000..f46c4d3
--- /dev/null
+++ b/net/rfkill/sunxi-rfkill.c
@@ -0,0 +1,163 @@
+/*
+ * net/rfkill/sunxi-rfkill.c
+ *
+ * (C) Copyright 2007-2012
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/rfkill.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <plat/sys_config.h>
+
+#if defined CONFIG_BT_HCIUART_DEBUG
+#define RF_MSG(...)     do {printk("[rfkill]: "__VA_ARGS__);} while(0)
+#else
+#define RF_MSG(...)
+#endif
+
+#if (defined CONFIG_MMC_SUNXI_POWER_CONTROL)
+extern int mmc_pm_get_mod_type(void);
+extern int mmc_pm_gpio_ctrl(char* name, int level);
+extern int mmc_pm_get_io_val(char* name);
+#else
+static __inline int mmc_pm_get_mod_type(void) {return 0;}
+static __inline int mmc_pm_gpio_ctrl(char* name, int level) {return -1;}
+static __inline int mmc_pm_get_io_val(char* name) {return -1;}
+#endif
+
+static DEFINE_SPINLOCK(bt_power_lock);
+static const char bt_name[] = "bcm4329";
+static struct rfkill *sw_rfkill;
+static int rfkill_set_power(void *data, bool blocked)
+{
+    unsigned int mod_sel = mmc_pm_get_mod_type();
+
+    RF_MSG("rfkill set power %d\n", blocked);
+
+    spin_lock(&bt_power_lock);
+    switch (mod_sel)
+    {
+        case 2: /* usi bm01a */
+            if (!blocked) {
+                mmc_pm_gpio_ctrl("usi_bm01a_bt_regon", 1);
+                mmc_pm_gpio_ctrl("usi_bm01a_bt_rst", 1);
+            } else {
+                mmc_pm_gpio_ctrl("usi_bm01a_bt_regon", 0);
+                mmc_pm_gpio_ctrl("usi_bm01a_bt_rst", 0);
+            }
+            break;
+        case 5: /* swb b23 */
+            if (!blocked) {
+                mmc_pm_gpio_ctrl("swbb23_bt_shdn", 1);
+            } else {
+                mmc_pm_gpio_ctrl("swbb23_bt_shdn", 0);
+            }
+            break;
+        case 6: /* huawei mw269x */
+            if (!blocked) {
+                mmc_pm_gpio_ctrl("hw_mw269x_bt_wake", 1);
+                mmc_pm_gpio_ctrl("hw_mw269x_bt_enb", 1);
+            } else {
+                mmc_pm_gpio_ctrl("hw_mw269x_bt_enb", 0);
+                mmc_pm_gpio_ctrl("hw_mw269x_bt_wake", 0);
+            }
+            break;
+        default:
+            RF_MSG("no bt module matched !!\n");
+    }
+
+    spin_unlock(&bt_power_lock);
+    msleep(100);
+    return 0;
+}
+
+static struct rfkill_ops sw_rfkill_ops = {
+    .set_block = rfkill_set_power,
+};
+
+static int sw_rfkill_probe(struct platform_device *pdev)
+{
+    int ret = 0;
+
+    sw_rfkill = rfkill_alloc(bt_name, &pdev->dev,
+                        RFKILL_TYPE_BLUETOOTH, &sw_rfkill_ops, NULL);
+    if (unlikely(!sw_rfkill))
+        return -ENOMEM;
+
+    ret = rfkill_register(sw_rfkill);
+    if (unlikely(ret)) {
+        rfkill_destroy(sw_rfkill);
+    }
+    return ret;
+}
+
+static int sw_rfkill_remove(struct platform_device *pdev)
+{
+    if (likely(sw_rfkill)) {
+        rfkill_unregister(sw_rfkill);
+        rfkill_destroy(sw_rfkill);
+    }
+    return 0;
+}
+
+static struct platform_driver sw_rfkill_driver = {
+    .probe = sw_rfkill_probe,
+    .remove = sw_rfkill_remove,
+    .driver = {
+        .name = "sunxi-rfkill",
+        .owner = THIS_MODULE,
+    },
+};
+
+static struct platform_device sw_rfkill_dev = {
+    .name = "sunxi-rfkill",
+};
+
+static int __init sw_rfkill_init(void)
+{
+	unsigned int mod_sel = mmc_pm_get_mod_type();
+
+	switch (mod_sel) {
+	case 2: /* usi bm01a */
+	case 5: /* swb b23 */
+	case 6: /* huawei mw269x */
+		break;
+	default:
+		return -ENODEV;
+	}
+
+    platform_device_register(&sw_rfkill_dev);
+    return platform_driver_register(&sw_rfkill_driver);
+}
+
+static void __exit sw_rfkill_exit(void)
+{
+    platform_device_unregister(&sw_rfkill_dev);
+    platform_driver_unregister(&sw_rfkill_driver);
+}
+
+module_init(sw_rfkill_init);
+module_exit(sw_rfkill_exit);
+
+MODULE_DESCRIPTION("sunxi-rfkill driver");
+MODULE_AUTHOR("Aaron.yemao<leafy.myeh@allwinnertech.com>");
+MODULE_LICENSE(GPL);
+
diff --git a/net/rfkill/sunxi-usb-rfkill.c b/net/rfkill/sunxi-usb-rfkill.c
new file mode 100644
index 0000000..9f6a3db
--- /dev/null
+++ b/net/rfkill/sunxi-usb-rfkill.c
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) 2013 Hans de Goede <hdegoede@redhat.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/rfkill.h>
+#include <linux/slab.h>
+#include <plat/sys_config.h>
+
+struct sunxi_usb_rfkill_data {
+	unsigned gpio_handle;
+	struct rfkill *rfkill_dev;
+};
+
+static int sunxi_usb_rfkill_set_block(void *data, bool blocked)
+{
+	struct sunxi_usb_rfkill_data *rfkill = data;
+
+	return gpio_write_one_pin_value(rfkill->gpio_handle, !blocked,
+					"usb_wifi_gpio_power");
+}
+
+static const struct rfkill_ops sunxi_usb_rfkill_ops = {
+	.set_block = sunxi_usb_rfkill_set_block,
+};
+
+static int sunxi_usb_rfkill_probe(struct platform_device *pdev)
+{
+	struct sunxi_usb_rfkill_data *rfkill;
+	int ret = -ENODEV;
+
+	rfkill = kzalloc(sizeof(*rfkill), GFP_KERNEL);
+	if (!rfkill)
+		return -ENOMEM;
+
+	rfkill->gpio_handle = gpio_request_ex("usb_wifi_para",
+					      "usb_wifi_gpio_power");
+	if (!rfkill->gpio_handle)
+		goto fail_alloc;
+
+	rfkill->rfkill_dev =
+		rfkill_alloc("sunxi usb wifi", &pdev->dev, RFKILL_TYPE_WLAN,
+			     &sunxi_usb_rfkill_ops, rfkill);
+	if (!rfkill->rfkill_dev)
+		goto fail_gpio;
+
+	ret = rfkill_register(rfkill->rfkill_dev);
+	if (ret < 0)
+		goto fail_rfkill;
+
+	platform_set_drvdata(pdev, rfkill);
+	return 0;
+
+fail_rfkill:
+	rfkill_destroy(rfkill->rfkill_dev);
+fail_gpio:
+	gpio_release(rfkill->gpio_handle, 1);
+fail_alloc:
+	kfree(rfkill);
+
+	return ret;
+}
+
+static int sunxi_usb_rfkill_remove(struct platform_device *pdev)
+{
+	struct sunxi_usb_rfkill_data *rfkill = platform_get_drvdata(pdev);
+
+	platform_set_drvdata(pdev, NULL);
+	rfkill_destroy(rfkill->rfkill_dev);
+	gpio_release(rfkill->gpio_handle, 1);
+	kfree(rfkill);
+
+	return 0;
+}
+
+static struct platform_driver sunxi_usb_rfkill_driver = {
+	.probe = sunxi_usb_rfkill_probe,
+	.remove = __devexit_p(sunxi_usb_rfkill_remove),
+	.driver = {
+		   .name = "sunxi-usb-rfkill",
+		   .owner = THIS_MODULE,
+	},
+};
+
+static struct platform_device sunxi_usb_rfkill_dev = {
+	.name = "sunxi-usb-rfkill",
+};
+
+static int __init sunxi_usb_rfkill_init(void)
+{
+	user_gpio_set_t gpio = { " ", 0 };
+	int ret, usb_wifi_used = 0;
+
+	ret = script_parser_fetch("usb_wifi_para", "usb_wifi_used",
+				  &usb_wifi_used, 1);
+	if (ret != 0 || !usb_wifi_used)
+		return -ENODEV;
+
+	ret = script_parser_fetch("usb_wifi_para", "usb_wifi_gpio_power",
+				  (int *)&gpio, (sizeof(gpio) >> 2));
+	if (ret != 0)
+		return -ENODEV;
+
+	ret = platform_device_register(&sunxi_usb_rfkill_dev);
+	if (ret < 0)
+		return ret;
+
+	ret = platform_driver_register(&sunxi_usb_rfkill_driver);
+	if (ret < 0) {
+		platform_device_unregister(&sunxi_usb_rfkill_dev);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void __exit sunxi_usb_rfkill_exit(void)
+{
+	platform_driver_unregister(&sunxi_usb_rfkill_driver);
+	platform_device_unregister(&sunxi_usb_rfkill_dev);
+}
+
+module_init(sunxi_usb_rfkill_init);
+module_exit(sunxi_usb_rfkill_exit);
+
+MODULE_DESCRIPTION("sunxi usb rfkill");
+MODULE_AUTHOR("Hans de Goede <hdegoede@redhat.com>");
+MODULE_LICENSE("GPL");
