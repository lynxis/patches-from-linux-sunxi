diff --git a/drivers/w1/Kconfig b/drivers/w1/Kconfig
index fd2c7bd..d61d211 100644
--- a/drivers/w1/Kconfig
+++ b/drivers/w1/Kconfig
@@ -25,6 +25,32 @@ config W1_CON
 	  2. Userspace commands. Includes read/write and search/alarm search commands.
 	  3. Replies to userspace commands.
 
+config W1_SUNXI
+	depends on GPIO_SUNXI
+	tristate "1-wire sunxi support"
+	default n
+	--- help ---
+		This adds a way to register a platform device for 1-wire bus.
+		It introduces a new section "[w1_para]" in the FEX to configure the
+		GPIO pin number used for the bus, with the attribute named "gpio".
+		The GPIO pin must also be defined in the "[gpio_para]" section.
+
+		1-wire device can then be accessed using the w1-gpio driver.
+
+		Example configuration :
+		[w1_para]
+		gpio = 3
+
+		[gpio_para]
+		gpio_used = 1
+		gpio_num = 3
+		...
+		gpio_pin_3 = port:PH7<0><default><default><0>
+
+		It is also possible to configure the GPIO pin number with the
+		module paramerer "gpio". In this case, if the pin is valid,
+		it will be used instead of what is configured in the FEX script.
+
 source drivers/w1/masters/Kconfig
 source drivers/w1/slaves/Kconfig
 
diff --git a/drivers/w1/Makefile b/drivers/w1/Makefile
index 6bb0b54..3569cb3 100644
--- a/drivers/w1/Makefile
+++ b/drivers/w1/Makefile
@@ -3,6 +3,7 @@
 #
 
 obj-$(CONFIG_W1)	+= wire.o
+obj-$(CONFIG_W1_SUNXI) += w1_sunxi.o
 wire-objs		:= w1.o w1_int.o w1_family.o w1_netlink.o w1_io.o
 
 obj-y			+= masters/ slaves/
diff --git a/drivers/w1/w1_sunxi.c b/drivers/w1/w1_sunxi.c
new file mode 100644
index 0000000..de24f06
--- /dev/null
+++ b/drivers/w1/w1_sunxi.c
@@ -0,0 +1,48 @@
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/w1-gpio.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <plat/sys_config.h>
+
+static int gpio = -1;
+module_param(gpio, int, 0444);
+MODULE_PARM_DESC(gpio, "w1 gpio pin number");
+
+static struct w1_gpio_platform_data w1_gpio_pdata = {
+	.pin = -1,
+	.is_open_drain = 0,
+};
+
+static struct platform_device w1_device = {
+	.name = "w1-gpio",
+	.id = -1,
+	.dev.platform_data = &w1_gpio_pdata,
+};
+
+static int __init w1_sunxi_init(void)
+{
+	int ret;
+	if (!gpio_is_valid(gpio)) {
+		ret =
+		    script_parser_fetch("w1_para", "gpio", &gpio, sizeof(int));
+		if (ret || !gpio_is_valid(gpio)) {
+			pr_err("invalid gpio pin : %d\n", gpio);
+			return -EINVAL;
+		}
+	}
+	w1_gpio_pdata.pin = gpio;
+	return platform_device_register(&w1_device);
+}
+
+static void __exit w1_sunxi_exit(void)
+{
+	platform_device_unregister(&w1_device);
+}
+
+module_init(w1_sunxi_init);
+module_exit(w1_sunxi_exit);
+
+MODULE_DESCRIPTION("GPIO w1 sunxi platform device");
+MODULE_AUTHOR("Damien Nicolet <zardam@gmail.com>");
+MODULE_LICENSE("GPL");
