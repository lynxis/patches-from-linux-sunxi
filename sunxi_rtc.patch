diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index 8c8377d..4bda8ec 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -259,6 +259,12 @@ config RTC_DRV_PCF8563
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-pcf8563.
 
+config RTC_DRV_SUN5I
+	tristate "sun5i rtc driver"
+	depends on ARCH_SUN5I
+	help
+	  sun5i rtc driver,use the Philips PCF8563 RTC chip.
+
 config RTC_DRV_PCF8583
 	tristate "Philips PCF8583"
 	help
@@ -955,6 +961,12 @@ config RTC_DRV_TX4939
 	  Driver for the internal RTC (Realtime Clock) module found on
 	  Toshiba TX4939 SoC.
 
+config RTC_DRV_SUN4I
+	tristate "sun4i/sun7i rtc driver"
+	depends on ARCH_SUN4I || ARCH_SUN7I
+	help
+	  sun4i/sun7i rtc driver
+
 config RTC_DRV_MV
 	tristate "Marvell SoC RTC"
 	depends on ARCH_KIRKWOOD || ARCH_DOVE
diff --git a/drivers/rtc/Makefile b/drivers/rtc/Makefile
index 727ae77..cc662a8 100644
--- a/drivers/rtc/Makefile
+++ b/drivers/rtc/Makefile
@@ -111,3 +111,5 @@ obj-$(CONFIG_RTC_DRV_VT8500)	+= rtc-vt8500.o
 obj-$(CONFIG_RTC_DRV_WM831X)	+= rtc-wm831x.o
 obj-$(CONFIG_RTC_DRV_WM8350)	+= rtc-wm8350.o
 obj-$(CONFIG_RTC_DRV_X1205)	+= rtc-x1205.o
+obj-$(CONFIG_RTC_DRV_SUN4I)	+= rtc-sun4i.o
+obj-$(CONFIG_RTC_DRV_SUN5I)	+= rtc-sun5i.o
diff --git a/drivers/rtc/rtc-sun4i.c b/drivers/rtc/rtc-sun4i.c
new file mode 100644
index 0000000..3521a75
--- /dev/null
+++ b/drivers/rtc/rtc-sun4i.c
@@ -0,0 +1,680 @@
+/*
+ * drivers\rtc\rtc-sun4i.c
+ * (C) Copyright 2007-2011
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ * huangxin <huangxin@allwinnertech.com>
+ *
+ * some simple description for this code
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/string.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/rtc.h>
+#include <linux/bcd.h>
+#include <linux/clk.h>
+#include <linux/log2.h>
+#include <linux/delay.h>
+
+#include <plat/platform.h>
+#include <plat/system.h>
+#include <mach/irqs.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/irq.h>
+#include <asm/delay.h>
+
+#define SUNXI_LOSC_CTRL_REG               	(0x100)
+
+#define SUNXI_RTC_DATE_REG                	(0x104)
+#define SUNXI_RTC_TIME_REG                	(0x108)
+
+#define SUNXI_RTC_ALARM_DD_HH_MM_SS_REG   	(0x10C)
+
+#define SUNXI_ALARM_EN_REG                	(0x114)
+#define SUNXI_ALARM_INT_CTRL_REG          	(0x118)
+#define SUNXI_ALARM_INT_STATUS_REG        	(0x11C)
+
+/*interrupt control
+*rtc week interrupt control
+*/
+#define RTC_ENABLE_WK_IRQ            		0x00000002
+
+/*rtc count interrupt control*/
+#define RTC_ALARM_COUNT_INT_EN 				0x00000100
+
+#define RTC_ENABLE_CNT_IRQ        			0x00000001
+
+/*Crystal Control*/
+#define REG_LOSCCTRL_MAGIC		    		0x16aa0000
+#define REG_CLK32K_AUTO_SWT_EN  			(0x00004000)
+#define RTC_SOURCE_EXTERNAL         		0x00000001
+#define RTC_HHMMSS_ACCESS           		0x00000100
+#define RTC_YYMMDD_ACCESS           		0x00000080
+#define EXT_LOSC_GSM                    	(0x00000008)
+
+/*Date Value*/
+#define IS_LEAP_YEAR(year) \
+	(((year) % 400) == 0 || (((year) % 100) != 0 && ((year) % 4) == 0))
+
+#define DATA_YEAR_MIN			(sunxi_is_sun7i() ? 1970 : 2010)
+#define DATA_YEAR_MAX			(sunxi_is_sun7i() ? 2100 : 2073)
+#define DATA_YEAR_OFFSET		(sunxi_is_sun7i() ? 0 : 110)
+#define DATA_YEAR_MASK			(sunxi_is_sun7i() ? 0xff : 0x3f)
+#define LEAP_BIT			(sunxi_is_sun7i() ? 24 : 22)
+
+#define DATE_GET_DAY_VALUE(x)       		((x) &0x0000001f)
+#define DATE_GET_MON_VALUE(x)       		(((x)&0x00000f00) >> 8 )
+#define DATE_GET_YEAR_VALUE(x)      		(((x) >> 16) & DATA_YEAR_MASK)
+
+#define DATE_SET_DAY_VALUE(x)       		DATE_GET_DAY_VALUE(x)
+#define DATE_SET_MON_VALUE(x)       		(((x)&0x0000000f) << 8 )
+#define DATE_SET_YEAR_VALUE(x)      		(((x) & DATA_YEAR_MASK) << 16)
+#define LEAP_SET_VALUE(x)           		(((x)&0x00000001) << LEAP_BIT)
+
+/*Time Value*/
+#define TIME_GET_SEC_VALUE(x)       		((x) &0x0000003f)
+#define TIME_GET_MIN_VALUE(x)       		(((x)&0x00003f00) >> 8 )
+#define TIME_GET_HOUR_VALUE(x)      		(((x)&0x001f0000) >> 16)
+
+#define TIME_SET_SEC_VALUE(x)       		TIME_GET_SEC_VALUE(x)
+#define TIME_SET_MIN_VALUE(x)       		(((x)&0x0000003f) << 8 )
+#define TIME_SET_HOUR_VALUE(x)      		(((x)&0x0000001f) << 16)
+
+/*ALARM Value*/
+#define ALARM_GET_SEC_VALUE(x)      		((x) &0x0000003f)
+#define ALARM_GET_MIN_VALUE(x)      		(((x)&0x00003f00) >> 8 )
+#define ALARM_GET_HOUR_VALUE(x)     		(((x)&0x001f0000) >> 16)
+
+#define ALARM_SET_SEC_VALUE(x)      		((x) &0x0000003f)
+#define ALARM_SET_MIN_VALUE(x)      		(((x)&0x0000003f) << 8 )
+#define ALARM_SET_HOUR_VALUE(x)     		(((x)&0x0000001f) << 16)
+#define ALARM_SET_DAY_VALUE(x)      		(((x)&0x000000ff) << 24)
+
+#define PWM_CTRL_REG_BASE         			(0xf1c20c00+0x200)
+
+//#define RTC_ALARM_DEBUG
+/*
+ * notice: IN 23 A version, operation(eg. write date, time reg)
+ * that will affect losc reg, will also affect pwm reg at the same time
+ * it is a ic bug needed to be fixed,
+ * right now, before write date, time reg, we need to backup pwm reg
+ * after writing, we should restore pwm reg.
+ */
+//#define BACKUP_PWM
+
+/* record rtc device handle for platform to restore system time */
+struct rtc_device   *sw_rtc_dev = NULL;
+
+/*è¯´æ sunxiæå¤§ååä¸º63å¹´çæ¶é´
+è¯¥é©±å¨æ¯æï¼2010ï½2073ï¼å¹´çæ¶é´*/
+
+static void __iomem *sunxi_rtc_base;
+
+static int sunxi_rtc_alarmno = NO_IRQ;
+static int losc_err_flag   = 0;
+
+/* IRQ Handlers, irq no. is shared with timer2 */
+static irqreturn_t sunxi_rtc_alarmirq(int irq, void *id)
+{
+	struct rtc_device *rdev = id;
+	u32 val;
+
+    /*judge the int is whether ours*/
+    val = readl(sunxi_rtc_base + SUNXI_ALARM_INT_STATUS_REG)&(RTC_ENABLE_WK_IRQ | RTC_ENABLE_CNT_IRQ);
+    if (val) {
+		/*Clear pending count alarm*/
+		val = readl(sunxi_rtc_base + SUNXI_ALARM_INT_STATUS_REG);//0x11c
+		val |= (RTC_ENABLE_CNT_IRQ);	//0x00000001
+		writel(val, sunxi_rtc_base + SUNXI_ALARM_INT_STATUS_REG);
+
+		rtc_update_irq(rdev, 1, RTC_AF | RTC_IRQF);
+		return IRQ_HANDLED;
+    } else {
+        return IRQ_NONE;
+    }
+}
+
+/* Update control registers,asynchronous interrupt enable*/
+static void sunxi_rtc_setaie(int to)
+{
+	u32 alarm_irq_val;
+
+#ifdef RTC_ALARM_DEBUG
+	printk("%s: aie=%d\n", __func__, to);
+#endif
+
+	alarm_irq_val = readl(sunxi_rtc_base + SUNXI_ALARM_EN_REG);
+	switch(to){
+		case 1:
+		alarm_irq_val |= RTC_ALARM_COUNT_INT_EN;		//0x00000100
+	    writel(alarm_irq_val, sunxi_rtc_base + SUNXI_ALARM_EN_REG);//0x114
+		break;
+		case 0:
+		default:
+		alarm_irq_val = 0x00000000;
+	    writel(alarm_irq_val, sunxi_rtc_base + SUNXI_ALARM_EN_REG);//0x114
+		break;
+	}
+}
+
+/* Time read/write */
+static int sunxi_rtc_gettime(struct device *dev, struct rtc_time *rtc_tm)
+{
+	unsigned int have_retried = 0;
+	void __iomem *base = sunxi_rtc_base;
+	unsigned int date_tmp = 0;
+	unsigned int time_tmp = 0;
+
+retry_get_time:
+	if (losc_err_flag) {
+		rtc_tm->tm_sec  = 0;
+		rtc_tm->tm_min  = 0;
+		rtc_tm->tm_hour = 0;
+
+		rtc_tm->tm_mday = 1;
+		rtc_tm->tm_mon  = 0;
+		rtc_tm->tm_year = 110;
+		/* 2010-Jan-1 is better then 1970-Jan-1, esp. because of:
+		 * http://tree.celinuxforum.org/CelfPubWiki/Ext3OrphanedInodeProblem */
+		return 0; 
+	}
+
+	/* first to get the date, then time, because the sec turn to 0 will
+	 * effect the date */
+	date_tmp = readl(base + SUNXI_RTC_DATE_REG);
+	time_tmp = readl(base + SUNXI_RTC_TIME_REG);
+
+	rtc_tm->tm_sec  = TIME_GET_SEC_VALUE(time_tmp);
+	rtc_tm->tm_min  = TIME_GET_MIN_VALUE(time_tmp);
+	rtc_tm->tm_hour = TIME_GET_HOUR_VALUE(time_tmp);
+
+	rtc_tm->tm_mday = DATE_GET_DAY_VALUE(date_tmp);
+	rtc_tm->tm_mon  = DATE_GET_MON_VALUE(date_tmp);
+	rtc_tm->tm_year = DATE_GET_YEAR_VALUE(date_tmp);
+
+	/* the only way to work out wether the system was mid-update
+	 * when we read it is to check the second counter, and if it
+	 * is zero, then we re-try the entire read
+	 */
+	if (rtc_tm->tm_sec == 0 && !have_retried) {
+		have_retried = 1;
+		goto retry_get_time;
+	}
+
+	rtc_tm->tm_year += DATA_YEAR_OFFSET;
+	rtc_tm->tm_mon  -= 1;
+
+	if (rtc_tm->tm_year < 70) {
+		dev_err(dev, "Warning: RTC time is wrong!\n");
+		losc_err_flag = 1;
+		goto retry_get_time;
+	}
+
+	return 0;
+}
+
+static int sunxi_rtc_settime(struct device *dev, struct rtc_time *tm)
+{
+	void __iomem *base = sunxi_rtc_base;
+	unsigned int date_tmp = 0;
+	unsigned int time_tmp = 0;
+	unsigned int crystal_data = 0;
+	unsigned int timeout = 0;
+	int actual_year = 0;
+	int line = 0;
+
+#ifdef BACKUP_PWM
+	unsigned int pwm_ctrl_reg_backup = 0;
+	unsigned int pwm_ch0_period_backup = 0;
+#endif
+
+	/* int tm_year; years from 1900
+	 * int tm_mon; months since january 0-11
+	 * the input para tm->tm_year is the offset related 1900;
+	 */
+	actual_year = tm->tm_year + 1900;
+	if (actual_year < DATA_YEAR_MIN || actual_year > DATA_YEAR_MAX) {
+		dev_err(dev, "rtc only supports years between %d - %d\n",
+			DATA_YEAR_MIN, DATA_YEAR_MAX);
+		return -EINVAL;
+	}
+
+	crystal_data = readl(base + SUNXI_LOSC_CTRL_REG);
+
+	/*Any bit of [9:7] is set, The time and date
+	* register can`t be written, we re-try the entried read
+	*/
+	{
+	    /*check at most 3 times.*/
+	    int times = 3;
+	    while((crystal_data & 0x380) && (times--)){
+	    	dev_info(dev, "cannot change rtc now!\n");
+	    	msleep(500);
+	    	crystal_data = readl(base + SUNXI_LOSC_CTRL_REG);
+	    }
+	}
+
+	tm->tm_year -= DATA_YEAR_OFFSET;
+	tm->tm_mon  += 1;
+
+	/* prevent the application seting an invalid time */
+	switch (tm->tm_mon) {
+	case 1:
+	case 3:
+	case 5:
+	case 7:
+	case 8:
+	case 10:
+	case 12:
+		if (tm->tm_mday > 31)
+			line = __LINE__;
+		break;
+	case 4:
+	case 6:
+	case 9:
+	case 11:
+		if (tm->tm_mday > 30)
+			line = __LINE__;
+		break;
+	case 2:
+		if (IS_LEAP_YEAR(actual_year)) {
+			if (tm->tm_mday > 29)
+				line = __LINE__;
+		} else {
+			if (tm->tm_mday > 28)
+				line = __LINE__;
+		}
+		break;
+	default:
+		line = __LINE__;
+		break;
+	}
+	if (tm->tm_hour > 24 || tm->tm_min > 59 || tm->tm_sec > 59)
+		line = __LINE__;
+	if (0 != line) {
+		dev_err(dev, "err: date %d-%d-%d %d:%d:%d, so reset to 2010-1-1 00:00:00\n",
+			tm->tm_year + 1900, tm->tm_mon, tm->tm_mday,
+			tm->tm_hour, tm->tm_min, tm->tm_sec);
+		tm->tm_sec  = 0;
+		tm->tm_min  = 0;
+		tm->tm_hour = 0;
+		tm->tm_mday = 0;
+		tm->tm_mon  = 0;
+		tm->tm_year = 110 - DATA_YEAR_OFFSET;
+	}
+
+	dev_info(dev, "actually set time to %d-%d-%d %d:%d:%d\n",
+		tm->tm_year + 1900 + DATA_YEAR_OFFSET,
+		tm->tm_mon, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+
+	/* set hour, minute, second */
+	date_tmp = (DATE_SET_DAY_VALUE(tm->tm_mday)|DATE_SET_MON_VALUE(tm->tm_mon)
+                    |DATE_SET_YEAR_VALUE(tm->tm_year));
+
+	time_tmp = (TIME_SET_SEC_VALUE(tm->tm_sec)|TIME_SET_MIN_VALUE(tm->tm_min)
+                    |TIME_SET_HOUR_VALUE(tm->tm_hour));
+
+#ifdef BACKUP_PWM
+    pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+    pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+	printk("[rtc-pwm] 1 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+	writel(time_tmp,  base + SUNXI_RTC_TIME_REG);
+	timeout = 0xffff;
+	while((readl(base + SUNXI_LOSC_CTRL_REG)&(RTC_HHMMSS_ACCESS))&&(--timeout))
+	if (timeout == 0) {
+        dev_err(dev, "fail to set rtc time.\n");
+
+#ifdef BACKUP_PWM
+	    writel(pwm_ctrl_reg_backup, PWM_CTRL_REG_BASE + 0);
+	    writel(pwm_ch0_period_backup, PWM_CTRL_REG_BASE + 4);
+
+		pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+    	pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+		printk("[rtc-pwm] 2 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+        return -1;
+    }
+
+	if (IS_LEAP_YEAR(actual_year)) {
+		/*Set Leap Year bit*/
+		date_tmp |= LEAP_SET_VALUE(1);
+	}
+
+	writel(date_tmp, base + SUNXI_RTC_DATE_REG);
+	timeout = 0xffff;
+	while((readl(base + SUNXI_LOSC_CTRL_REG)&(RTC_YYMMDD_ACCESS))&&(--timeout))
+	if (timeout == 0) {
+        dev_err(dev, "fail to set rtc date.\n");
+
+#ifdef BACKUP_PWM
+        writel(pwm_ctrl_reg_backup, PWM_CTRL_REG_BASE + 0);
+        writel(pwm_ch0_period_backup, PWM_CTRL_REG_BASE + 4);
+
+		pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+	    pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+	    printk("[rtc-pwm] 5 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+        return -1;
+    }
+
+#ifdef BACKUP_PWM
+       writel(pwm_ctrl_reg_backup, PWM_CTRL_REG_BASE + 0);
+       writel(pwm_ch0_period_backup, PWM_CTRL_REG_BASE + 4);
+
+ 		pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+	    pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+	    printk("[rtc-pwm] 6 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+    /*wait about 70us to make sure the the time is really written into target.*/
+    udelay(70);
+
+	losc_err_flag = 0;
+	return 0;
+}
+
+static int sunxi_rtc_getalarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+	struct rtc_time *alm_tm = &alrm->time;
+	void __iomem *base = sunxi_rtc_base;
+	unsigned int alarm_en;
+	unsigned int alarm_tmp = 0;
+	unsigned int date_tmp = 0;
+
+    alarm_tmp = readl(base + SUNXI_RTC_ALARM_DD_HH_MM_SS_REG);
+	date_tmp = readl(base + SUNXI_RTC_DATE_REG);
+
+    alm_tm->tm_sec  = ALARM_GET_SEC_VALUE(alarm_tmp);
+    alm_tm->tm_min  = ALARM_GET_MIN_VALUE(alarm_tmp);
+    alm_tm->tm_hour = ALARM_GET_HOUR_VALUE(alarm_tmp);
+
+	alm_tm->tm_mday = DATE_GET_DAY_VALUE(date_tmp);
+	alm_tm->tm_mon  = DATE_GET_MON_VALUE(date_tmp);
+	alm_tm->tm_year = DATE_GET_YEAR_VALUE(date_tmp);
+
+    alm_tm->tm_year += DATA_YEAR_OFFSET;
+    alm_tm->tm_mon  -= 1;
+
+    alarm_en = readl(base + SUNXI_ALARM_INT_CTRL_REG);
+    if(alarm_en&&RTC_ALARM_COUNT_INT_EN)
+    	alrm->enabled = 1;
+
+	return 0;
+}
+
+static int sunxi_rtc_setalarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+    struct rtc_time *tm = &alrm->time;
+    void __iomem *base = sunxi_rtc_base;
+    unsigned int alarm_tmp = 0;
+    unsigned int alarm_en;
+    int ret = 0;
+    struct rtc_time tm_now;
+    unsigned long time_now = 0;
+    unsigned long time_set = 0;
+    unsigned long time_gap = 0;
+    unsigned long time_gap_day = 0;
+    unsigned long time_gap_hour = 0;
+    unsigned long time_gap_minute = 0;
+    unsigned long time_gap_second = 0;
+
+#ifdef RTC_ALARM_DEBUG
+    printk("*****************************\n\n");
+    printk("line:%d,%s the alarm time: year:%d, month:%d, day:%d. hour:%d.minute:%d.second:%d\n",\
+    __LINE__, __func__, tm->tm_year, tm->tm_mon,\
+    	 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+   	printk("*****************************\n\n");
+#endif
+
+    ret = sunxi_rtc_gettime(dev, &tm_now);
+
+#ifdef RTC_ALARM_DEBUG
+    printk("line:%d,%s the current time: year:%d, month:%d, day:%d. hour:%d.minute:%d.second:%d\n",\
+    __LINE__, __func__, tm_now.tm_year, tm_now.tm_mon,\
+    	 tm_now.tm_mday, tm_now.tm_hour, tm_now.tm_min, tm_now.tm_sec);
+   	printk("*****************************\n\n");
+#endif
+
+    ret = rtc_tm_to_time(tm, &time_set);
+    ret = rtc_tm_to_time(&tm_now, &time_now);
+    if(time_set <= time_now){
+    	dev_err(dev, "The time or date can`t set, The day has pass!!!\n");
+    	return -EINVAL;
+    }
+    time_gap = time_set - time_now;
+    time_gap_day = time_gap/(3600*24);//day
+    time_gap_hour = (time_gap - time_gap_day*24*60*60)/3600;//hour
+    time_gap_minute = (time_gap - time_gap_day*24*60*60 - time_gap_hour*60*60)/60;//minute
+    time_gap_second = time_gap - time_gap_day*24*60*60 - time_gap_hour*60*60-time_gap_minute*60;//second
+    if(time_gap_day > 255) {
+    	dev_err(dev, "The time or date can`t set, The day range of 0 to 255\n");
+    	return -EINVAL;
+    }
+
+#ifdef RTC_ALARM_DEBUG
+   	printk("line:%d,%s year:%d, month:%d, day:%ld. hour:%ld.minute:%ld.second:%ld\n",\
+    __LINE__, __func__, tm->tm_year, tm->tm_mon,\
+    	 time_gap_day, time_gap_hour, time_gap_minute, time_gap_second);
+    printk("*****************************\n\n");
+#endif
+
+	/*clear the alarm counter enable bit*/
+    sunxi_rtc_setaie(0);
+
+    /*clear the alarm count value!!!*/
+    writel(0x00000000, base + SUNXI_RTC_ALARM_DD_HH_MM_SS_REG);
+    __udelay(100);
+
+    /*rewrite the alarm count value!!!*/
+    alarm_tmp = ALARM_SET_SEC_VALUE(time_gap_second) | ALARM_SET_MIN_VALUE(time_gap_minute)
+    	| ALARM_SET_HOUR_VALUE(time_gap_hour) | ALARM_SET_DAY_VALUE(time_gap_day);
+    writel(alarm_tmp, base + SUNXI_RTC_ALARM_DD_HH_MM_SS_REG);//0x10c
+
+    /*clear the count enable alarm irq bit*/
+    writel(0x00000000, base + SUNXI_ALARM_INT_CTRL_REG);
+	alarm_en = readl(base + SUNXI_ALARM_INT_CTRL_REG);//0x118
+
+	/*enable the counter alarm irq*/
+	alarm_en = readl(base + SUNXI_ALARM_INT_CTRL_REG);//0x118
+	alarm_en |= RTC_ENABLE_CNT_IRQ;
+    writel(alarm_en, base + SUNXI_ALARM_INT_CTRL_REG);//enable the counter irq!!!
+
+	if(alrm->enabled != 1){
+		printk("warning:the rtc counter interrupt isnot enable!!!,%s,%d\n", __func__, __LINE__);
+	}
+
+	/*decided whether we should start the counter to down count*/
+	sunxi_rtc_setaie(alrm->enabled);
+
+#ifdef RTC_ALARM_DEBUG
+	printk("------------------------------------------\n\n");
+	printk("%d,10c reg val:%x\n", __LINE__, *(volatile int *)(0xf1c20c00+0x10c));
+	printk("%d,114 reg val:%x\n", __LINE__, *(volatile int *)(0xf1c20c00+0x114));
+	printk("%d,118 reg val:%x\n", __LINE__, *(volatile int *)(0xf1c20c00+0x118));
+	printk("%d,11c reg val:%x\n", __LINE__, *(volatile int *)(0xf1c20c00+0x11c));
+	printk("------------------------------------------\n\n");
+#endif
+
+	return 0;
+}
+
+static int sunxi_rtc_open(struct device *dev)
+{
+	return 0;
+}
+
+static void sunxi_rtc_release(struct device *dev)
+{
+
+}
+
+static const struct rtc_class_ops sunxi_rtcops = {
+	.open				= sunxi_rtc_open,
+	.release			= sunxi_rtc_release,
+	.read_time			= sunxi_rtc_gettime,
+	.set_time			= sunxi_rtc_settime,
+	.read_alarm			= sunxi_rtc_getalarm,
+	.set_alarm			= sunxi_rtc_setalarm,
+};
+
+static int __devexit sunxi_rtc_remove(struct platform_device *pdev)
+{
+	struct rtc_device *rtc = platform_get_drvdata(pdev);
+    free_irq(sunxi_rtc_alarmno, rtc);
+    rtc_device_unregister(rtc);
+	platform_set_drvdata(pdev, NULL);
+
+	sunxi_rtc_setaie(0);
+
+	return 0;
+}
+
+static int __devinit sunxi_rtc_probe(struct platform_device *pdev)
+{
+	struct rtc_device *rtc;
+	int ret;
+	unsigned int tmp_data;
+
+#ifdef BACKUP_PWM
+	unsigned int pwm_ctrl_reg_backup = 0;
+	unsigned int pwm_ch0_period_backup = 0;
+#endif
+
+	sunxi_rtc_base = (void __iomem *)(SW_VA_TIMERC_IO_BASE);
+	sunxi_rtc_alarmno = SW_INT_IRQNO_ALARM;
+
+	/* select RTC clock source
+	*  on fpga board, internal 32k clk src is the default, and can not be changed
+	*
+	*  RTC CLOCK SOURCE internal 32K HZ
+	*/
+#ifdef BACKUP_PWM
+	pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+	pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+	printk("[rtc-pwm] 1 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+	/*	upate by kevin, 2011-9-7 18:23
+	*	step1: set keyfiled,éæ©å¤é¨æ¶æ¯
+	*/
+	tmp_data = readl(sunxi_rtc_base + SUNXI_LOSC_CTRL_REG);
+	tmp_data &= (~REG_CLK32K_AUTO_SWT_EN);            		//disable auto switch,bit-14
+	tmp_data |= (RTC_SOURCE_EXTERNAL | REG_LOSCCTRL_MAGIC); //external     32768hz osc
+	tmp_data |= (EXT_LOSC_GSM);                             //external 32768hz osc gsm
+	writel(tmp_data, sunxi_rtc_base + SUNXI_LOSC_CTRL_REG);
+	__udelay(100);
+
+	/*step2: check set resultï¼æ¥è¯¢æ¯å¦è®¾ç½®æå*/
+	tmp_data = readl(sunxi_rtc_base + SUNXI_LOSC_CTRL_REG);
+	if(!(tmp_data & RTC_SOURCE_EXTERNAL)){
+		dev_err(&pdev->dev, "Error: Set LOSC to external failed.\n");
+		dev_err(&pdev->dev, "Warning: RTC time will be wrong!\n");
+		losc_err_flag = 1;
+	}
+
+	sunxi_rtc_setaie(0);
+
+#ifdef BACKUP_PWM
+	writel(pwm_ctrl_reg_backup, PWM_CTRL_REG_BASE + 0);
+	writel(pwm_ch0_period_backup, PWM_CTRL_REG_BASE + 4);
+	pwm_ctrl_reg_backup = readl(PWM_CTRL_REG_BASE + 0);
+	pwm_ch0_period_backup = readl(PWM_CTRL_REG_BASE + 4);
+	printk("[rtc-pwm] 2 pwm_ctrl_reg_backup = %x pwm_ch0_period_backup = %x", pwm_ctrl_reg_backup, pwm_ch0_period_backup);
+#endif
+
+	device_init_wakeup(&pdev->dev, 1);
+
+	/* register RTC and exit */
+	rtc = rtc_device_register("rtc", &pdev->dev, &sunxi_rtcops, THIS_MODULE);
+	if (IS_ERR(rtc)) {
+		dev_err(&pdev->dev, "cannot attach rtc\n");
+		ret = PTR_ERR(rtc);
+		goto err_out;
+	}
+	ret = request_irq(sunxi_rtc_alarmno, sunxi_rtc_alarmirq,
+			  IRQF_DISABLED,  "sunxi-rtc alarm", rtc);
+	if (ret) {
+		dev_err(&pdev->dev, "IRQ%d error %d\n", sunxi_rtc_alarmno, ret);
+		rtc_device_unregister(rtc);
+		return ret;
+	}
+
+	sw_rtc_dev = rtc;
+	platform_set_drvdata(pdev, rtc);//è®¾ç½®rtcç»ææ°æ®ä¸ºpdevçç§ææ°æ®
+
+	return 0;
+
+	err_out:
+		return ret;
+}
+
+#ifdef CONFIG_PM
+/* RTC Power management control
+*  rtc do not to suspend, need to keep timing.
+*/
+#define sunxi_rtc_suspend NULL
+#define sunxi_rtc_resume  NULL
+#else
+#define sunxi_rtc_suspend NULL
+#define sunxi_rtc_resume  NULL
+#endif
+
+/*share the irq no. with timer2*/
+static struct resource sunxi_rtc_resource[] = {
+	[0] = {
+		.start = SW_INT_IRQNO_ALARM,
+		.end   = SW_INT_IRQNO_ALARM,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device sunxi_device_rtc = {
+	.name		    = "sunxi-rtc",
+	.id		        = -1,
+	.num_resources	= ARRAY_SIZE(sunxi_rtc_resource),
+	.resource	    = sunxi_rtc_resource,
+};
+
+
+static struct platform_driver sunxi_rtc_driver = {
+	.probe		= sunxi_rtc_probe,
+	.remove		= __devexit_p(sunxi_rtc_remove),
+	.suspend	= sunxi_rtc_suspend,
+	.resume		= sunxi_rtc_resume,
+	.driver		= {
+		.name	= "sunxi-rtc",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init sunxi_rtc_init(void)
+{
+	platform_device_register(&sunxi_device_rtc);
+	return platform_driver_register(&sunxi_rtc_driver);
+}
+
+static void __exit sunxi_rtc_exit(void)
+{
+	platform_driver_unregister(&sunxi_rtc_driver);
+}
+
+module_init(sunxi_rtc_init);
+module_exit(sunxi_rtc_exit);
+
+MODULE_DESCRIPTION("Sochip sunxi RTC Driver");
+MODULE_AUTHOR("ben");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:sunxi-rtc");
diff --git a/drivers/rtc/rtc-sun5i.c b/drivers/rtc/rtc-sun5i.c
new file mode 100644
index 0000000..08a8ce6
--- /dev/null
+++ b/drivers/rtc/rtc-sun5i.c
@@ -0,0 +1,762 @@
+/*
+ * drivers\rtc\rtc-sun5i.c
+ * An I2C driver for the Philips PCF8563 RTC
+ * (C) Copyright 2007-2011
+ * Allwinner Technology Co., Ltd. <www.allwinnertech.com>
+ * huangxin <huangxin@allwinnertech.com>
+ *
+ * some simple description for this code
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/bcd.h>
+#include <linux/rtc.h>
+#include <linux/slab.h>
+#include <plat/sys_config.h>
+#define DRV_VERSION "0.4.3"
+
+/* Control registers */
+#define PCF8563_REG_ST1		0x00 /* status */
+#define PCF8563_REG_ST2		0x01
+
+/* Datetime registers */
+#define PCF8563_REG_SC		0x02 /* datetime */
+#define PCF8563_REG_MN		0x03
+#define PCF8563_REG_HR		0x04
+#define PCF8563_REG_DM		0x05
+#define PCF8563_REG_DW		0x06
+#define PCF8563_REG_MO		0x07
+#define PCF8563_REG_YR		0x08
+
+/* Alarm function registers */
+#define PCF8563_REG_AMN		0x09 /* alarm minute */
+#define PCF8563_REG_AHR		0x0A /* alarm hour */
+#define PCF8563_REG_ADM		0x0B /* alarm day */
+#define PCF8563_REG_ADW		0x0C /* alarm week */
+
+#define ALARM_FLAG_BIT      (3)
+#define ALARM_INT_BIT       (1)
+
+/* Clock output register */
+#define PCF8563_REG_CLKO	0x0D /* clock out */
+
+/* Timer function register */
+#define PCF8563_REG_TMRC	0x0E /* timer control */
+#define PCF8563_REG_TMR		0x0F /* timer */
+
+#define PCF8563_SC_LV		0x80 /* low voltage */
+#define PCF8563_MO_C		0x80 /* century */
+
+#define RTC_NAME	"pcf8563"
+//#define F25_ALARM
+
+static struct i2c_driver pcf8563_driver;
+static __u32 twi_id = 0;
+
+static struct i2c_client *this_client;
+
+/* Addresses to scan */
+static union{
+	unsigned short dirty_addr_buf[2];
+	const unsigned short normal_i2c[2];
+}u_i2c_addr = {{0x00},};
+
+struct pcf8563 {
+	struct rtc_device *rtc;
+	/*
+	 * The meaning of MO_C bit varies by the chip type.
+	 * From PCF8563 datasheet: this bit is toggled when the years
+	 * register overflows from 99 to 00
+	 *   0 indicates the century is 20xx
+	 *   1 indicates the century is 19xx
+	 * From RTC8564 datasheet: this bit indicates change of
+	 * century. When the year digit data overflows from 99 to 00,
+	 * this bit is set. By presetting it to 0 while still in the
+	 * 20th century, it will be set in year 2000, ...
+	 * There seems no reliable way to know how the system use this
+	 * bit.  So let's do it heuristically, assuming we are live in
+	 * 1970...2069.
+	 */
+	int c_polarity;	/* 0: MO_C=1 means 19xx, otherwise MO_C=1 means 20xx */
+};
+
+/**
+ * rtc_fetch_sysconfig_para - get config info from sysconfig.fex file.
+ * return value:
+ *                    = 0; success;
+ *                    < 0; err
+ */
+static int rtc_fetch_sysconfig_para(void)
+{
+	int ret = -1;
+	int device_used = -1;
+	__u32 twi_addr = 0;
+
+	char name[I2C_NAME_SIZE];
+	script_parser_value_type_t type = SCRIPT_PARSER_VALUE_TYPE_STRING;
+
+	//__u32 twi_id = 0;
+
+	printk("========RTC Inital ===================\n");
+	if(SCRIPT_PARSER_OK != script_parser_fetch("rtc_para", "rtc_used", &device_used, 1)){
+	                printk("rtc: script_parser_fetch err. \n");
+	                goto script_parser_fetch_err;
+	}
+	if(1 == device_used){
+		if(SCRIPT_PARSER_OK != script_parser_fetch_ex("rtc_para", "rtc_name", (int *)(&name), &type, sizeof(name)/sizeof(int))){
+			pr_err("%s: script_parser_fetch err. \n", __func__);
+			goto script_parser_fetch_err;
+		}
+		if(strcmp(RTC_NAME, name)){
+			pr_err("%s: name %s does not match HV_NAME. \n", __func__, name);
+			return ret;
+		}
+		if(SCRIPT_PARSER_OK != script_parser_fetch("rtc_para", "rtc_twi_addr", &twi_addr, sizeof(twi_addr)/sizeof(__u32))){
+			pr_err("%s: script_parser_fetch err. \n", name);
+			goto script_parser_fetch_err;
+		}
+		u_i2c_addr.dirty_addr_buf[0] = twi_addr;
+		u_i2c_addr.dirty_addr_buf[1] = I2C_CLIENT_END;
+		printk("%s: after: rtc_twi_addr is 0x%x, dirty_addr_buf: 0x%hx. dirty_addr_buf[1]: 0x%hx \n", \
+		__func__, twi_addr, u_i2c_addr.dirty_addr_buf[0], u_i2c_addr.dirty_addr_buf[1]);
+
+		if(SCRIPT_PARSER_OK != script_parser_fetch("rtc_para", "rtc_twi_id", &twi_id, 1)){
+			pr_err("%s: script_parser_fetch err. \n", name);
+			goto script_parser_fetch_err;
+		}
+		printk("%s: rtc_twi_id is %d. \n", __func__, twi_id);
+
+	}else{
+		pr_err("%s: rtc_unused. \n",  __func__);
+		ret = -1;
+	}
+	printk("%s:ok\n",__func__);
+	return 0;
+
+script_parser_fetch_err:
+	pr_notice("=========rtc script_parser_fetch_err============\n");
+	return ret;
+}
+
+/**
+ * rtc_detect - Device detection callback for automatic device creation
+ * return value:
+ *                    = 0; success;
+ *                    < 0; err
+ */
+int rtc_detect(struct i2c_client *client, struct i2c_board_info *info)
+{
+	struct i2c_adapter *adapter = client->adapter;
+printk("%s,line:%d,twi_id:%d,adapter->nr:%d\n", __func__, __LINE__,twi_id,adapter->nr);
+	if(twi_id == adapter->nr)
+	{
+		pr_info("%s: Detected chip %s at adapter %d, address 0x%02x\n",\
+			 __func__, RTC_NAME, i2c_adapter_id(adapter), client->addr);
+printk("%s,line:%d\n", __func__, __LINE__);
+		strlcpy(info->type, RTC_NAME, I2C_NAME_SIZE);
+		return 0;
+	}else{
+		printk("%s,line:%d\n", __func__, __LINE__);
+		return -ENODEV;
+	}
+}
+
+/*
+ * In the routines that deal directly with the pcf8563 hardware, we use
+ * rtc_time -- month 0-11, hour 0-23, yr = calendar year-epoch.
+ * Read clock stepsï¼
+ *		step1: Take the device address
+ *		step2: The time to read the first byte of address (beginning
+ *                     from the second reading)
+ *		step3: Read information seven time
+ *                     Reading seven time means to read one of (second, minute,
+  *                    hour, day of month, day of week, month, year) each time.
+ *		step4: Read time and put in the receive buffer
+ */
+static int pcf8563_get_datetime(struct i2c_client *client, struct rtc_time *tm)
+{
+	struct pcf8563 *pcf8563 = i2c_get_clientdata(client);
+	unsigned char buf[13] = { PCF8563_REG_ST1 };
+	int ret;
+	struct i2c_msg msgs[] = {
+		{ client->addr, 0, 1, buf },	/* setup read ptr */
+		{ client->addr, I2C_M_RD, 13, buf },	/* read status + date */
+	};
+	ret = i2c_transfer(client->adapter, msgs, 2);
+	/* read registers */
+	if (ret != 2) {
+		dev_err(&client->dev, "%s: read error,ret:%d\n", __func__,ret);
+		return -EIO;
+	}
+
+	if (buf[PCF8563_REG_SC] & PCF8563_SC_LV)
+		dev_info(&client->dev,
+			"low voltage detected, date/time is not reliable.\n");
+	printk("%s,raw data is st1=%02x, st2=%02x, sec=%02x, min=%02x, hr=%02x, mday=%02x, wday=%02x, mon=%02x, year=%02x\n",\
+	 __func__,buf[0], buf[1], buf[2], buf[3],buf[4], buf[5], buf[6], buf[7],buf[8]);
+
+	tm->tm_sec = bcd2bin(buf[PCF8563_REG_SC] & 0x7F);
+	tm->tm_min = bcd2bin(buf[PCF8563_REG_MN] & 0x7F);
+	tm->tm_hour = bcd2bin(buf[PCF8563_REG_HR] & 0x3F); /* rtc hr 0-23 */
+	tm->tm_mday = bcd2bin(buf[PCF8563_REG_DM] & 0x3F);
+	tm->tm_wday = buf[PCF8563_REG_DW] & 0x07;
+	tm->tm_mon = bcd2bin(buf[PCF8563_REG_MO] & 0x1F) - 1; /* month is 1..12 in RTC but 0..11 in linux*/
+	tm->tm_year = bcd2bin(buf[PCF8563_REG_YR]);
+	if (tm->tm_year < 70)
+		tm->tm_year += 110;	/* assume we are in 2010...2079 */
+	/* detect the polarity heuristically. see note above. */
+	pcf8563->c_polarity = (buf[PCF8563_REG_MO] & PCF8563_MO_C) ?
+		(tm->tm_year >= 100) : (tm->tm_year < 100);
+
+	/*in A13,the mon read from rtc hardware is error? so set the datetime again?*/
+	#if 0
+	if (tm->tm_mon < 0) {
+		tm->tm_mon = 1;
+		ret = pcf8563_set_datetime(client, tm);
+	}
+	#endif
+
+	printk("%s: tm is secs=%d, mins=%d, hours=%d,mday=%d, mon=%d, year=%d, wday=%d\n",\
+		__func__,tm->tm_sec, tm->tm_min, tm->tm_hour, tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
+
+	/* the clock can give out invalid datetime, but we cannot return
+	 * -EINVAL otherwise hwclock will refuse to set the time on bootup.
+	 */
+	if (rtc_valid_tm(tm) < 0)
+		dev_err(&client->dev, "retrieved date/time is not valid.\n");
+
+	return 0;
+}
+
+/*
+* Write Clock Stepsï¼
+*	step1: A time into the transmit buffer (first address 50H)
+*	step2: Take the device address
+*	step3: Take the first address written to the register (from 00H to
+*              write)
+*	step4: Write information seven time and two control commands.
+*              Writing seven time means to write one of (second, minute, hour,
+*              day of month, day of week, month, year) each time.
+*	step5: Write time
+*/
+static int pcf8563_set_datetime(struct i2c_client *client, struct rtc_time *tm)
+{
+	struct pcf8563 *pcf8563 = i2c_get_clientdata(client);
+	int i, err;
+	unsigned char buf[9];
+	int leap_year = 0;
+
+	/*int tm_year; years from 1900
+    *int tm_mon; months since january 0-11
+    *the input para tm->tm_year is the offset related 1900;
+    */
+	leap_year = tm->tm_year + 1900;
+	if(leap_year > 2073 || leap_year < 2010) {
+		dev_err(&client->dev, "rtc only supports 63ï¼2010ï½2073ï¼ years\n");
+		return -EINVAL;
+	}
+	/*hardware base time:1900, but now set the default start time to 2010*/
+	tm->tm_year -= 110;
+	/* month is 1..12 in RTC but 0..11 in linux*/
+	tm->tm_mon  += 1;
+
+	/*prevent the application seting the error time*/
+	if(tm->tm_mon > 12){
+		_dev_info(&client->dev, "set time month error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+	       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+	       tm->tm_hour, tm->tm_min, tm->tm_sec);
+		switch(tm->tm_mon){
+			case 1:
+			case 3:
+			case 5:
+			case 7:
+			case 8:
+			case 10:
+			case 12:
+				if(tm->tm_mday > 31){
+					_dev_info(&client->dev, "set time day error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+				       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+				       tm->tm_hour, tm->tm_min, tm->tm_sec);
+				}
+				if((tm->tm_hour > 24)||(tm->tm_min > 59)||(tm->tm_sec > 59)){
+						_dev_info(&client->dev, "set time error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+				       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+				       tm->tm_hour, tm->tm_min, tm->tm_sec);
+				}
+				break;
+			case 4:
+			case 6:
+			case 9:
+			case 11:
+				if(tm->tm_mday > 30){
+					_dev_info(&client->dev, "set time day error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+				       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+				       tm->tm_hour, tm->tm_min, tm->tm_sec);
+				}
+				if((tm->tm_hour > 24)||(tm->tm_min > 59)||(tm->tm_sec > 59)){
+					_dev_info(&client->dev, "set time error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+				       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+				       tm->tm_hour, tm->tm_min, tm->tm_sec);
+				}
+				break;
+			case 2:
+				if((leap_year%400==0) || ((leap_year%100!=0) && (leap_year%4==0))) {
+					if(tm->tm_mday > 28){
+						_dev_info(&client->dev, "set time day error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+				       		tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+				       		tm->tm_hour, tm->tm_min, tm->tm_sec);
+					}
+					if((tm->tm_hour > 24)||(tm->tm_min > 59)||(tm->tm_sec > 59)){
+						_dev_info(&client->dev, "set time error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+					       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+					       tm->tm_hour, tm->tm_min, tm->tm_sec);
+					}
+				}else{
+					if(tm->tm_mday > 29){
+						_dev_info(&client->dev, "set time day error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+					       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+					       tm->tm_hour, tm->tm_min, tm->tm_sec);
+					}
+					if((tm->tm_hour > 24)||(tm->tm_min > 59)||(tm->tm_sec > 59)){
+						_dev_info(&client->dev, "set time error:line:%d,%d-%d-%d %d:%d:%d\n",__LINE__,
+					       tm->tm_year + 2010, tm->tm_mon, tm->tm_mday,
+					       tm->tm_hour, tm->tm_min, tm->tm_sec);
+					}
+
+				}
+				break;
+			default:
+				break;
+		}
+		/*if the set date error,set the default time:2010:01:01:00:00:00*/
+		tm->tm_sec  = 0;
+		tm->tm_min  = 0;
+		tm->tm_hour = 0;
+		tm->tm_mday = 1;
+		tm->tm_mon  = 1;
+		tm->tm_year = 110;// 2010 = 1900 + 110
+	}
+
+	printk("%s: secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d\n",\
+		__func__,tm->tm_sec, tm->tm_min, tm->tm_hour, tm->tm_mday, tm->tm_mon, tm->tm_year);
+
+	/* hours, minutes and seconds */
+	buf[PCF8563_REG_SC] = bin2bcd(tm->tm_sec);
+	buf[PCF8563_REG_MN] = bin2bcd(tm->tm_min);
+	buf[PCF8563_REG_HR] = bin2bcd(tm->tm_hour);
+
+	buf[PCF8563_REG_DM] = bin2bcd(tm->tm_mday);
+
+	/* month, 1 - 12 */
+	buf[PCF8563_REG_MO] = bin2bcd(tm->tm_mon);
+
+	/* year and century */
+	buf[PCF8563_REG_YR] = bin2bcd(tm->tm_year % 100);
+	if (pcf8563->c_polarity ? (tm->tm_year >= 0) : (tm->tm_year < 0))
+		buf[PCF8563_REG_MO] |= PCF8563_MO_C;
+
+	//buf[PCF8563_REG_DW] = tm->tm_wday & 0x07;
+
+	/* write register's data */
+	for (i = 0; i < 7; i++) {
+		unsigned char data[2] = { PCF8563_REG_SC + i,
+						buf[PCF8563_REG_SC + i] };
+
+		err = i2c_master_send(client, data, sizeof(data));
+		if (err != sizeof(data)) {
+			dev_err(&client->dev,
+				"%s: err=%d addr=%02x, data=%02x\n",
+				__func__, err, data[0], data[1]);
+			return -EIO;
+		}
+	}
+
+	return 0;
+}
+
+static int pcf8563_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	return pcf8563_get_datetime(to_i2c_client(dev), tm);
+}
+
+static int pcf8563_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	return pcf8563_set_datetime(to_i2c_client(dev), tm);
+}
+
+#ifdef F25_ALARM
+int pcf8563_alarm_enable(void)
+{
+	int ret;
+	int err;
+	int i;
+	unsigned char buf[13];
+	struct i2c_msg msgs[] = {
+		{ this_client->addr, 0, 1, buf },	/* setup read ptr */
+		{ this_client->addr, I2C_M_RD, 13, buf },	/* read status + date */
+	};
+
+	ret = i2c_transfer(this_client->adapter, msgs, 2);
+	/* read registers */
+	if (ret != 2) {
+		printk("%s: read error,ret:%d\n", __func__,ret);
+		return -EIO;
+	}
+		/*clear alarm flag and disable alarm interrupt*/
+	buf[PCF8563_REG_ST2] &= ~(1<<ALARM_FLAG_BIT);
+	buf[PCF8563_REG_ST2] &= (1<<ALARM_INT_BIT);
+
+	/* write register's data */
+	for (i = 0; i < 1; i++) {
+		unsigned char data[2] = { PCF8563_REG_ST2 + i,
+						buf[PCF8563_REG_ST2 + i] };
+
+		err = i2c_master_send(this_client, data, sizeof(data));
+		if (err != sizeof(data)) {
+			printk("%s: err=%d addr=%02x, data=%02x\n",
+				__func__, err, data[0], data[1]);
+			return -EIO;
+		}
+	}
+
+	buf[PCF8563_REG_AMN] = (0<<7);
+	buf[PCF8563_REG_AHR] = (0<<7);
+	buf[PCF8563_REG_ADM] = (0<<7);
+	buf[PCF8563_REG_ADW] = (1<<7);
+		/* write register's data */
+	for (i = 0; i < 4; i++) {
+		unsigned char data[2] = { PCF8563_REG_AMN + i,
+						buf[PCF8563_REG_AMN + i] };
+
+		err = i2c_master_send(this_client, data, sizeof(data));
+		if (err != sizeof(data)) {
+			printk("%s: err=%d addr=%02x, data=%02x\n",
+				__func__, err, data[0], data[1]);
+			return -EIO;
+		}
+	}
+	return 0;
+}
+
+int pcf8563_alarm_disable(void) {
+    int ret;
+    int err;
+    int i;
+    unsigned char buf[13];
+	struct i2c_msg msgs[] = {
+		{ this_client->addr, 0, 1, buf },	/* setup read ptr */
+		{ this_client->addr, I2C_M_RD, 13, buf },	/* read status + date */
+	};
+
+	ret = i2c_transfer(this_client->adapter, msgs, 2);
+	/* read registers */
+	if (ret != 2) {
+		printk("%s: read error,ret:%d\n", __func__,ret);
+		return -EIO;
+	}
+	/*clear alarm flag and disable alarm interrupt*/
+	buf[PCF8563_REG_ST2] &= ~(1<<ALARM_FLAG_BIT);
+	buf[PCF8563_REG_ST2] &= ~(1<<ALARM_INT_BIT);
+
+	/* write register's data */
+	for (i = 0; i < 1; i++) {
+		unsigned char data[2] = { PCF8563_REG_ST2 + i,
+						buf[PCF8563_REG_ST2 + i] };
+
+		err = i2c_master_send(this_client, data, sizeof(data));
+		if (err != sizeof(data)) {
+			printk("%s: err=%d addr=%02x, data=%02x\n",
+				__func__, err, data[0], data[1]);
+			return -EIO;
+		}
+	}
+
+	buf[PCF8563_REG_AMN] = (1<<7);
+	buf[PCF8563_REG_AHR] = (1<<7);
+	buf[PCF8563_REG_ADM] = (1<<7);
+	/* write register's data */
+	for (i = 0; i < 3; i++) {
+		unsigned char data[2] = { PCF8563_REG_AMN + i,
+						buf[PCF8563_REG_AMN + i] };
+
+		err = i2c_master_send(this_client, data, sizeof(data));
+		if (err != sizeof(data)) {
+			printk("%s: err=%d addr=%02x, data=%02x\n",
+				__func__, err, data[0], data[1]);
+			return -EIO;
+		}
+	}
+	return 0;
+}
+
+static irqreturn_t pcf8563_interrupt(int irq, void *id)
+{
+	int ret;
+	ret = pcf8563_alarm_disable();
+	if(ret != 0){
+		printk("err:%s,%d\n", __func__, __LINE__);
+	}
+	return IRQ_HANDLED;
+}
+
+static int pcf8563_read_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+	unsigned char buf[13] = { PCF8563_REG_ST1 };
+	int ret;
+	struct rtc_time *alm_tm = &alrm->time;
+	struct i2c_msg msgs[] = {
+		{ this_client->addr, 0, 1, buf },	/* setup read ptr */
+		{ this_client->addr, I2C_M_RD, 13, buf },	/* read status + date */
+	};
+	ret = i2c_transfer(this_client->adapter, msgs, 2);
+	/* read registers */
+	if (ret != 2) {
+		printk("%s: read error,ret:%d\n", __func__,ret);
+		return -EIO;
+	}
+
+//	if (buf[PCF8563_REG_SC] & PCF8563_SC_LV)
+//		dev_info(&client->dev,
+//			"low voltage detected, date/time is not reliable.\n");
+	printk("%s,raw data is st1=%02x, st2=%02x, sec=%02x, min=%02x, hr=%02x, mday=%02x, wday=%02x, mon=%02x, year=%02x\n",\
+	 __func__,buf[0], buf[1], buf[2], buf[3],buf[4], buf[5], buf[6], buf[7],buf[8]);
+
+	alm_tm->tm_sec = bcd2bin(buf[PCF8563_REG_AMN] & 0x7F);
+	alm_tm->tm_hour = bcd2bin(buf[PCF8563_REG_AHR] & 0x3F);
+	alm_tm->tm_mday = bcd2bin(buf[PCF8563_REG_ADM] & 0x3F);
+	alm_tm->tm_wday = buf[PCF8563_REG_DW] & 0x07;
+	alm_tm->tm_mon = bcd2bin(buf[PCF8563_REG_MO] & 0x1F) - 1; /* month is 1..12 in RTC but 0..11 in linux*/
+	alm_tm->tm_year = bcd2bin(buf[PCF8563_REG_YR]);
+	if (alm_tm->tm_year < 70)
+		alm_tm->tm_year += 110;	/* assume we are in 2010...2079 */
+	/* detect the polarity heuristically. see note above. */
+//	pcf8563->c_polarity = (buf[PCF8563_REG_MO] & PCF8563_MO_C) ?
+//		(alm_tm->tm_year >= 100) : (alm_tm->tm_year < 100);
+
+	printk("%s: alm_tm is secs=%d, mins=%d, hours=%d,mday=%d, mon=%d, year=%d, wday=%d\n",\
+		__func__,alm_tm->tm_sec, alm_tm->tm_min, alm_tm->tm_hour, alm_tm->tm_mday, alm_tm->tm_mon, alm_tm->tm_year, alm_tm->tm_wday);
+
+	return 0;
+}
+
+static int pcf8563_set_alarm(struct device *dev, struct rtc_wkalrm *alrm)
+{
+	struct rtc_time *tm = &alrm->time;
+	int i;
+    int ret = 0;
+    struct rtc_time tm_now;
+
+    unsigned long time_now = 0;
+    unsigned long time_set = 0;
+    unsigned long time_gap = 0;
+    unsigned long time_gap_day = 0;
+    unsigned long time_gap_hour = 0;
+    unsigned long time_gap_minute = 0;
+    unsigned long time_gap_second = 0;
+    unsigned char buf[13];
+
+    #ifdef RTC_ALARM_DEBUG
+    printk("*****************************\n\n");
+    printk("line:%d,%s the alarm time: year:%d, month:%d, day:%d. hour:%d.minute:%d.second:%d\n",\
+    __LINE__, __func__, tm->tm_year, tm->tm_mon,\
+    	 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+   	printk("*****************************\n\n");
+#endif
+
+    ret = pcf8563_rtc_read_time(dev, &tm_now);
+
+#ifdef RTC_ALARM_DEBUG
+    printk("line:%d,%s the current time: year:%d, month:%d, day:%d. hour:%d.minute:%d.second:%d\n",\
+    __LINE__, __func__, tm_now.tm_year, tm_now.tm_mon,\
+    	 tm_now.tm_mday, tm_now.tm_hour, tm_now.tm_min, tm_now.tm_sec);
+   	printk("*****************************\n\n");
+#endif
+
+    ret = rtc_tm_to_time(tm, &time_set);
+    ret = rtc_tm_to_time(&tm_now, &time_now);
+    if (time_set <= time_now) {
+    	dev_err(dev, "The time or date can`t set, The day has pass!!!\n");
+    	return -EINVAL;
+    }
+
+    time_gap = time_set - time_now;
+    time_gap_day = time_gap/(3600*24);//day
+    time_gap_hour = (time_gap - time_gap_day*24)/3600;//hour
+    time_gap_minute = (time_gap - time_gap_day*24*60 - time_gap_hour*60)/60;//minute
+    time_gap_second = time_gap - time_gap_day*24*60*60 - time_gap_hour*60*60-time_gap_minute*60;//second
+
+    /* sometimes error adjustment occur in linux kernels, and the values set
+       during that time frame can also have error(4 secs), time_gap_second
+       can make sure the error is inside the 60 sec range.
+       error = difference */
+    if (time_gap_second >= 30) {
+    	time_gap_minute = time_gap_minute + 1;
+    }
+    if (time_gap_minute >= 60) {
+    	time_gap_hour = time_gap_hour + 1;
+    	time_gap_minute = time_gap_minute - 60;
+    }
+    if (time_gap_hour >= 24) {
+    	time_gap_day = time_gap_day + 1;
+    	time_gap_hour = time_gap_hour - 24;
+    }
+    if(time_gap_day > 255) {
+    	dev_err(dev, "The time or date can`t set, The day range of 0 to 255\n");
+    	return -EINVAL;
+    }
+
+#ifdef RTC_ALARM_DEBUG
+   	printk("line:%d,%s year:%d, month:%d, day:%ld. hour:%ld.minute:%ld.second:%ld\n",\
+    __LINE__, __func__, tm->tm_year, tm->tm_mon,\
+    	 time_gap_day, time_gap_hour, time_gap_minute, time_gap_second);
+    printk("*****************************\n\n");
+#endif
+
+	/*clear the alarm counter enable bit*/
+    pcf8563_alarm_disable();
+    buf[PCF8563_REG_AMN] = bin2bcd(time_gap_minute);
+	buf[PCF8563_REG_AHR] = bin2bcd(time_gap_hour);
+	buf[PCF8563_REG_ADM] = bin2bcd(time_gap_day);
+
+    /* write register's data */
+	for (i = 0; i < 3; i++) {
+		unsigned char data[2] = { PCF8563_REG_AMN + i,
+						buf[PCF8563_REG_AMN + i] };
+
+		ret = i2c_master_send(this_client, data, sizeof(data));
+		if (ret != sizeof(data)) {
+			dev_err(&this_client->dev,
+				"%s: err=%d addr=%02x, data=%02x\n",
+				__func__, ret, data[0], data[1]);
+			return -EIO;
+		}
+	};
+
+	/* enable or disable alarm */
+	if (alrm->enabled) {
+		pcf8563_alarm_enable();
+    } else {
+    	pcf8563_alarm_disable();
+	}
+	return 0;
+}
+#endif
+static const struct rtc_class_ops pcf8563_rtc_ops = {
+	.read_time	= pcf8563_rtc_read_time,
+	.set_time	= pcf8563_rtc_set_time,
+#ifdef F25_ALARM
+	.read_alarm	= pcf8563_read_alarm,
+	.set_alarm	= pcf8563_set_alarm,
+#endif
+};
+
+static int pcf8563_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct pcf8563 *pcf8563;
+	int err = 0;
+
+	printk("%s,line:%d\n",__func__, __LINE__);
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+
+	pcf8563 = kzalloc(sizeof(struct pcf8563), GFP_KERNEL);
+	if (!pcf8563)
+		return -ENOMEM;
+
+	dev_info(&client->dev, "chip found, driver version " DRV_VERSION "\n");
+
+	this_client = client;
+	this_client->addr = client->addr;
+
+	i2c_set_clientdata(client, pcf8563);
+
+	pcf8563->rtc = rtc_device_register(pcf8563_driver.driver.name,
+				&client->dev, &pcf8563_rtc_ops, THIS_MODULE);
+
+	if (IS_ERR(pcf8563->rtc)) {
+		err = PTR_ERR(pcf8563->rtc);
+		goto exit_kfree;
+	}
+	#ifdef F25_ALARM
+	err = request_irq(SW_INT_IRQNO_ENMI, pcf8563_interrupt, IRQF_SHARED, "pcf8563", pcf8563);
+
+	if (err < 0) {
+		dev_err(&client->dev, "pcf8563_probe: request irq failed\n");
+		goto exit_irq_request_failed;
+	}
+	#endif
+	return 0;
+#ifdef F25_ALARM
+exit_irq_request_failed:
+	free_irq(SW_INT_IRQNO_ENMI, pcf8563);
+#endif
+exit_kfree:
+	kfree(pcf8563);
+
+	return err;
+}
+
+static int pcf8563_remove(struct i2c_client *client)
+{
+	struct pcf8563 *pcf8563 = i2c_get_clientdata(client);
+
+	if (pcf8563->rtc)
+		rtc_device_unregister(pcf8563->rtc);
+
+	kfree(pcf8563);
+
+	return 0;
+}
+
+static const struct i2c_device_id pcf8563_id[] = {
+	{ RTC_NAME, 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, pcf8563_id);
+
+static struct i2c_driver pcf8563_driver = {
+	.class = I2C_CLASS_HWMON,
+	.driver			= {
+		.name		= RTC_NAME,
+	},
+	.probe			= pcf8563_probe,
+	.remove			= pcf8563_remove,
+	.id_table		= pcf8563_id,
+	.address_list	= u_i2c_addr.normal_i2c,
+};
+
+static int __init pcf8563_init(void)
+{
+	if(rtc_fetch_sysconfig_para()){
+		printk("%s,line:%d,err\n\n", __func__,__LINE__);
+		return -1;
+	}
+
+	printk("%s: after fetch_sysconfig_para:  normal_i2c: 0x%hx. normal_i2c[1]: 0x%hx \n", \
+	__func__, u_i2c_addr.normal_i2c[0], u_i2c_addr.normal_i2c[1]);
+
+	pcf8563_driver.detect = rtc_detect;
+
+	return i2c_add_driver(&pcf8563_driver);
+}
+
+static void __exit pcf8563_exit(void)
+{
+	i2c_del_driver(&pcf8563_driver);
+}
+
+MODULE_AUTHOR("huangxin");
+MODULE_DESCRIPTION("allwinner RTC driver");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(DRV_VERSION);
+
+module_init(pcf8563_init);
+module_exit(pcf8563_exit);
