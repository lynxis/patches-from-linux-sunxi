diff --git a/drivers/w1/Kconfig b/drivers/w1/Kconfig
index fd2c7bd..d61d211 100644
--- a/drivers/w1/Kconfig
+++ b/drivers/w1/Kconfig
@@ -25,6 +25,32 @@ config W1_CON
 	  2. Userspace commands. Includes read/write and search/alarm search commands.
 	  3. Replies to userspace commands.
 
+config W1_SUNXI
+	depends on GPIO_SUNXI
+	tristate "1-wire sunxi support"
+	default n
+	--- help ---
+		This adds a way to register a platform device for 1-wire bus.
+		It introduces a new section "[w1_para]" in the FEX to configure the
+		GPIO pin number used for the bus, with the attribute named "gpio".
+		The GPIO pin must also be defined in the "[gpio_para]" section.
+
+		1-wire device can then be accessed using the w1-gpio driver.
+
+		Example configuration :
+		[w1_para]
+		gpio = 3
+
+		[gpio_para]
+		gpio_used = 1
+		gpio_num = 3
+		...
+		gpio_pin_3 = port:PH7<0><default><default><0>
+
+		It is also possible to configure the GPIO pin number with the
+		module paramerer "gpio". In this case, if the pin is valid,
+		it will be used instead of what is configured in the FEX script.
+
 source drivers/w1/masters/Kconfig
 source drivers/w1/slaves/Kconfig
 
diff --git a/drivers/w1/Makefile b/drivers/w1/Makefile
index 6bb0b54..3569cb3 100644
--- a/drivers/w1/Makefile
+++ b/drivers/w1/Makefile
@@ -3,6 +3,7 @@
 #
 
 obj-$(CONFIG_W1)	+= wire.o
+obj-$(CONFIG_W1_SUNXI) += w1_sunxi.o
 wire-objs		:= w1.o w1_int.o w1_family.o w1_netlink.o w1_io.o
 
 obj-y			+= masters/ slaves/
diff --git a/drivers/w1/masters/ds2482.c b/drivers/w1/masters/ds2482.c
index e5f7441..d409352 100644
--- a/drivers/w1/masters/ds2482.c
+++ b/drivers/w1/masters/ds2482.c
@@ -18,6 +18,8 @@
 #include <linux/slab.h>
 #include <linux/i2c.h>
 #include <linux/delay.h>
+#include <linux/gpio.h>
+#include <linux/platform_data/ds2482.h>
 #include <asm/delay.h>
 
 #include "../w1.h"
@@ -84,7 +86,8 @@ static const u8 ds2482_chan_rd[8] =
 static int ds2482_probe(struct i2c_client *client,
 			const struct i2c_device_id *id);
 static int ds2482_remove(struct i2c_client *client);
-
+static int ds2482_suspend(struct device *dev);
+static int ds2482_resume(struct device *dev);
 
 /**
  * Driver data (common to all clients)
@@ -94,10 +97,16 @@ static const struct i2c_device_id ds2482_id[] = {
 	{ }
 };
 
+static const struct dev_pm_ops ds2482_pm_ops = {
+	.suspend = ds2482_suspend,
+	.resume = ds2482_resume,
+};
+
 static struct i2c_driver ds2482_driver = {
 	.driver = {
 		.owner	= THIS_MODULE,
 		.name	= "ds2482",
+		.pm = &ds2482_pm_ops,
 	},
 	.probe		= ds2482_probe,
 	.remove		= ds2482_remove,
@@ -119,6 +128,7 @@ struct ds2482_w1_chan {
 struct ds2482_data {
 	struct i2c_client	*client;
 	struct mutex		access_lock;
+	int			slpz_gpio;
 
 	/* 1-wire interface(s) */
 	int			w1_count;	/* 1 or 8 */
@@ -407,11 +417,31 @@ static u8 ds2482_w1_reset_bus(void *data)
 	return retval;
 }
 
+static int ds2482_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct ds2482_data *data = i2c_get_clientdata(client);
+
+	if (data->slpz_gpio >= 0)
+		gpio_set_value(data->slpz_gpio, 0);
+	return 0;
+}
+
+static int ds2482_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct ds2482_data *data = i2c_get_clientdata(client);
+
+	if (data->slpz_gpio >= 0)
+		gpio_set_value(data->slpz_gpio, 1);
+	return 0;
+}
 
 static int ds2482_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
 	struct ds2482_data *data;
+	struct ds2482_platform_data *pdata;
 	int err = -ENODEV;
 	int temp1;
 	int idx;
@@ -476,6 +506,16 @@ static int ds2482_probe(struct i2c_client *client,
 		}
 	}
 
+	pdata = client->dev.platform_data;
+	data->slpz_gpio = pdata ? pdata->slpz_gpio : -1;
+
+	if (data->slpz_gpio >= 0) {
+		err = gpio_request_one(data->slpz_gpio, GPIOF_OUT_INIT_HIGH,
+				       "ds2482.slpz");
+		if (err < 0)
+			goto exit_w1_remove;
+	}
+
 	return 0;
 
 exit_w1_remove:
@@ -500,6 +540,11 @@ static int ds2482_remove(struct i2c_client *client)
 			w1_remove_master_device(&data->w1_ch[idx].w1_bm);
 	}
 
+	if (data->slpz_gpio >= 0) {
+		gpio_set_value(data->slpz_gpio, 0);
+		gpio_free(data->slpz_gpio);
+	}
+
 	/* Free the memory */
 	kfree(data);
 	return 0;
diff --git a/drivers/w1/w1_sunxi.c b/drivers/w1/w1_sunxi.c
new file mode 100644
index 0000000..de24f06
--- /dev/null
+++ b/drivers/w1/w1_sunxi.c
@@ -0,0 +1,48 @@
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/w1-gpio.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <plat/sys_config.h>
+
+static int gpio = -1;
+module_param(gpio, int, 0444);
+MODULE_PARM_DESC(gpio, "w1 gpio pin number");
+
+static struct w1_gpio_platform_data w1_gpio_pdata = {
+	.pin = -1,
+	.is_open_drain = 0,
+};
+
+static struct platform_device w1_device = {
+	.name = "w1-gpio",
+	.id = -1,
+	.dev.platform_data = &w1_gpio_pdata,
+};
+
+static int __init w1_sunxi_init(void)
+{
+	int ret;
+	if (!gpio_is_valid(gpio)) {
+		ret =
+		    script_parser_fetch("w1_para", "gpio", &gpio, sizeof(int));
+		if (ret || !gpio_is_valid(gpio)) {
+			pr_err("invalid gpio pin : %d\n", gpio);
+			return -EINVAL;
+		}
+	}
+	w1_gpio_pdata.pin = gpio;
+	return platform_device_register(&w1_device);
+}
+
+static void __exit w1_sunxi_exit(void)
+{
+	platform_device_unregister(&w1_device);
+}
+
+module_init(w1_sunxi_init);
+module_exit(w1_sunxi_exit);
+
+MODULE_DESCRIPTION("GPIO w1 sunxi platform device");
+MODULE_AUTHOR("Damien Nicolet <zardam@gmail.com>");
+MODULE_LICENSE("GPL");
